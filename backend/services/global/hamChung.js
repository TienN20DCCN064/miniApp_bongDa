const hamChung = {
    // ƒê·∫∑t gi√° tr·ªã v√†o localStorage


    // T·ª± ƒë·ªông t·∫°o c√°c h√†m l·∫•y danh s√°ch t·ª´ `tables`


    async layDSNhaHang_theoLoai(loai) {
        return await layDanhSachSP_theoLoai(loai); // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ Promise
    },


    async layDanhSachDB_theoNhaHang(id) {
        return await layDanhSachDB_theoNhaHang(id); // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ Promise
    },
    async layDanhSachMenu_theoNhaHang(id) {
        return await layDanhSachMenu_theoNhaHang(id); // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ Promise
    },

    async layDanhSachMonAn_loai(idNhaHang, loai) {
        return await layDanhSachMonAnNhaHang_loai(idNhaHang, loai); // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ Promise
    },

    async layDanhSachBanAn_theoNhaHang(id_nhaHang) {
        return await layDanhSachBanAn_theoNhaHang(id_nhaHang); // ƒê·∫£m b·∫£o tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ Promise
    },


    async layDanhSach(table) {
        return await layDanhSach(table);
    },
    async layThongTinTheo_ID(table, id) {
        return await layThongTinTheo_ID(table, id);
    },



    async layThongTin_donDatBan_theoIDBan(id_ban,trangThai){
        return await layThongTin_donDatBan_theoIDBan(id_ban,trangThai);
    },
    taoID_theoBang(table) {
        return taoID_theoBang(table);
    },

    them(data, table_name) {
        return them(data, table_name)
    },
    sua(data, table_name) {
        return sua(data, table_name)
    },
    xoa(data, table_name) {
        return xoa(data, table_name)
    },


};

async function layDanhSach(table) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table);
        return await response.json();
    } catch (error) {
        console.error(`L·ªói khi l·∫•y danh s√°ch ${table}:`, error);
        return [];
    }
}


// async function layThongTinTheo_ID(table, id) {
//     const response = await fetch(GlobalStore.getLinkCongAPI() + table + "/" + id);
//     return await response.json();
// }
// H√†m l·∫•y chi ti·∫øt theo ID
async function layThongTinTheo_ID(table, id) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table + "/" + id);
        return await response.json();
    } catch (error) {
        console.error(`L·ªói khi l·∫•y th√¥ng tin ${table} v·ªõi ID ${id}:`, error);
        return null;
    }
}


async function layDanhSachDB_theoNhaHang(id) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + "dau_bep");
        const products = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ JSON

        // L·ªçc danh s√°ch s·∫£n ph·∫©m theo m√£ lo·∫°i
        const filteredProducts = products.filter(product => product.nha_hang_id === id);
        return filteredProducts;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        return [];
    }
}
async function layDanhSachSP_theoLoai(loai) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + "nha_hang");
        const products = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ JSON

        // L·ªçc danh s√°ch s·∫£n ph·∫©m theo m√£ lo·∫°i
        const filteredProducts = products.filter(product => product.loai_id === loai);
        // console.log("Loai sp l√† : " + loai);
        // console.log(filteredProducts);
        return filteredProducts;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        return [];
    }
}
async function layDanhSachBanAn_theoNhaHang(id_nhaHang) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + "ban_an");
        const products = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ JSON

        // L·ªçc danh s√°ch s·∫£n ph·∫©m theo m√£ lo·∫°i
        const filteredProducts = products.filter(product => product.nha_hang_id === id_nhaHang);
        // console.log("Loai sp l√† : " + loai);
        // console.log(filteredProducts);
        return filteredProducts;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch b√†n ƒÉn theo c·ªßa nh√† h√†ng:", error);
        return [];
    }
}

async function layDanhSachMonAnNhaHang_loai(idNhaHang, loai_do_an) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + "thuc_don");
        const products = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ JSON
        // console.log(products);
        // L·ªçc danh s√°ch s·∫£n ph·∫©m theo m√£ lo·∫°i
        // consolog.log ("Loai sp l√†: " + loai);
        // console.log("loai_do_an: " + loai_do_an);
        const listThucDon_1NhaHang = products.filter(product => product.nha_hang_id === idNhaHang);
        // console.log(listThucDon_1NhaHang);
        const list1LoaiThucDon_1NhaHang = listThucDon_1NhaHang.filter(listThucDon_1NhaHang => listThucDon_1NhaHang.loai_do_an === loai_do_an);

        //   console.log(list1LoaiThucDon_1NhaHang);





        return list1LoaiThucDon_1NhaHang;
    }
    catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        return [];
    }
}



async function layDanhSachMenu_theoNhaHang(id) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + "thuc_don");
        const products = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ JSON

        // L·ªçc danh s√°ch s·∫£n ph·∫©m theo m√£ lo·∫°i
        const filteredProducts = products.filter(product => product.nha_hang_id === id);
        // console.log("Loai sp l√† : " + loai);
        // console.log(filteredProducts);
        return filteredProducts;
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        return [];
    }
}



// async function layThongTin_donDatBan_theoIDBan(id_ban) {
//    /// t·ª´ id b√†n => id+ chi ti·∫øt ƒë∆°n ƒë·∫∑t b√†n => id ƒë∆°n ƒë·∫∑t b√†n
//     try {
//         const dsCT_donDatBan = await hamChung.layDanhSach("chi_tiet_don_dat_ban");
//         const dsDonDatBan = await hamChung.layDanhSach("don_dat_ban");
//         // console.log("thong tin ban ƒë∆∞·ª£c ch·ªçn : ");
//         const thongTinBanDuoChon = await dsCT_donDatBan.filter(product => product.ban_an_id === id_ban);

//         if (thongTinBanDuoChon != null) {
//             const donDatBan_theoBan = await hamChung.layThongTinTheo_ID("don_dat_ban", thongTinBanDuoChon[0].don_dat_ban_id);
//             // console.log("donDatBan_theoBan");
//             // console.log(donDatBan_theoBan);
//         }


//         // const response = await fetch(GlobalStore.getLinkCongAPI() + "chi_tiet_don_dat_ban");
//         // const products = await response.json(); // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ JSON

//         // // L·ªçc danh s√°ch s·∫£n ph·∫©m theo m√£ lo·∫°i
//         // const filteredProducts = products.filter(product => product.ban_an_id === id_ban);
//         // console.log("Loai sp l√† : " + loai);
//         // console.log(filteredProducts);
//         return thongTinBanDuoChon;
//     } catch (error) {
//         console.error("L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
//         return [];
//     }
// }


async function layThongTin_donDatBan_theoIDBan(id_ban, trangThai) {
    // console.log("üîç T√¨m ƒë∆°n ƒë·∫∑t b√†n cho b√†n:", id_ban);
    // console.log("üîç Bang ko :", id_ban === "B002");
    // console.log("üîç Tr·∫°ng th√°i c·∫ßn t√¨m:", trangThai);
    // id_ban = "B002";
    
    try {
        // üõë L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n ƒë·∫∑t b√†n
        const dsCT_donDatBan = await hamChung.layDanhSach("chi_tiet_don_dat_ban");
        const dsTheoBan = dsCT_donDatBan.filter(product => product.ban_an_id === id_ban);
        //console.log("üì¶ Danh s√°ch chi ti·∫øt ƒë∆°n ƒë·∫∑t b√†n:", dsTheoBan);
        const dsTheoTrangThai = dsTheoBan.filter(product => product.trang_thai === trangThai);

        if (dsTheoTrangThai.length === 0) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n ƒë·∫∑t b√†n cho b√†n n√†y.");
            return null;
        }
        const mot_chiTietDonXuLy = dsTheoTrangThai[0];
        const donDatBan_canTim = await hamChung.layThongTinTheo_ID("don_dat_ban", mot_chiTietDonXuLy.don_dat_ban_id);
        
        // console.log("üì¶ Th√¥ng tin ƒë∆°n ƒë·∫∑t b√†n t√¨m th·∫•y:", donDatBan_canTim);

        return donDatBan_canTim;
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ƒë∆°n ƒë·∫∑t b√†n:", error);
        return null;
    }
}


// // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian theo chu·∫©n Vi·ªát Nam (dd/mm/yyyy hh:mm:ss)
// function formatDateTime(dateTime) {
//     const date = new Date(dateTime);
//     const dd = String(date.getDate()).padStart(2, '0');
//     const mm = String(date.getMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
//     const yyyy = date.getFullYear();
//     const hh = String(date.getHours()).padStart(2, '0');
//     const mi = String(date.getMinutes()).padStart(2, '0');
//     const ss = String(date.getSeconds()).padStart(2, '0');

//     return `${dd}/${mm}/${yyyy} ${hh}:${mi}:${ss}`;
// }







// T√™n b·∫£ng	ID l·ªõn nh·∫•t	ID m·ªõi t·∫°o
// don_dat_ban	ddb_0023	ddb_0024

async function taoID_theoBang(table) {
    try {
        const response = await fetch(GlobalStore.getLinkCongAPI() + table);
        const danhSach = await response.json();

        // Chuy·ªÉn "don_dat_ban" -> "ddb_"
        const prefix = table.split("_").map(word => word.charAt(0)).join("") + "_";

        if (!Array.isArray(danhSach) || danhSach.length === 0) {
            return `${prefix}0001`; // N·∫øu b·∫£ng r·ªóng, t·∫°o ID ƒë·∫ßu ti√™n
        }

        // T√¨m ID l·ªõn nh·∫•t trong danh s√°ch
        const lastID = danhSach
        .map(item => item?.id) // D√πng optional chaining ƒë·ªÉ tr√°nh l·ªói
        .filter(id => typeof id === "string" && id.startsWith(prefix)) // Ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu
        .sort()
        .pop();
    

        if (!lastID) {
            return `${prefix}0001`; // N·∫øu kh√¥ng t√¨m th·∫•y ID h·ª£p l·ªá
        }

        // L·∫•y s·ªë cu·ªëi c√πng, tƒÉng l√™n 1
        const numberPart = parseInt(lastID.split("_")[1]) || 0;
        const newID = `${prefix}${(numberPart + 1).toString().padStart(4, "0")}`;

        return newID;
    } catch (error) {
        console.error(`L·ªói khi l·∫•y danh s√°ch ${table}:`, error);
        return `${table.split("_").map(w => w.charAt(0)).join("")}_0001`; // ID m·∫∑c ƒë·ªãnh n·∫øu l·ªói
    }
}


function them(data, table_name) {

    const primaryKeys = {
        "tai_khoan": ["tai_khoan"],         // Kh√≥a ch√≠nh l√† t√†i kho·∫£n
        "vai_tro": ["ma_vai_tro"],           // Kh√≥a ch√≠nh l√† m√£ vai tr√≤
        "nguoi_dung": ["ma_nguoi_dung"],      // Gi·ªØ m√£ ng∆∞·ªùi d√πng thay v√¨ t√†i kho·∫£n v√¨ c√≥ th·ªÉ c√≥ th√¥ng tin b·ªï sung
        "giai_dau": ["ma_giai_dau"],          // Kh√≥a ch√≠nh l√† m√£ gi·∫£i ƒë·∫•u
        "doi_bong": ["ma_doi_bong"],          // Kh√≥a ch√≠nh l√† m√£ ƒë·ªôi b√≥ng
        "vi_tri_cau_thu": ["ma_vi_tri"],      // ƒê·ªïi t√™n t·ª´ "vi_tri" th√†nh "vi_tri_cau_thu" ƒë·ªÉ kh·ªõp v·ªõi CSDL
        "cau_thu": ["ma_cau_thu"],            // Kh√≥a ch√≠nh l√† m√£ c·∫ßu th·ªß
        "cau_thu_giai_dau": ["ma_cau_thu", "ma_giai_dau"], // Kh√≥a ch√≠nh l√† (ma_cau_thu, ma_giai_dau)
        "vong_dau": ["ma_vong_dau"],         // Th√™m b·∫£ng v√≤ng ƒë·∫•u
        "tran_dau": ["ma_tran_dau"],          // Kh√≥a ch√≠nh l√† m√£ tr·∫≠n ƒë·∫•u
        "ket_qua_tran_dau": ["ma_tran_dau"],  // S·ª≠ d·ª•ng ma_tran_dau l√†m kh√≥a ch√≠nh thay v√¨ t·∫°o ma_ket_qua ri√™ng
        "trong_tai": ["ma_trong_tai"],        // B·∫£ng tr·ªçng t√†i, kh√≥a ch√≠nh l√† m√£ tr·ªçng t√†i
        "bang_dau": ["ma_bang_dau"],          // Th√™m b·∫£ng b·∫£ng ƒë·∫•u
        "bang_xep_hang_vong_loai": ["ma_doi_bong", "ma_bang_dau"] // Kh√≥a ch√≠nh l√† (ma_doi_bong, ma_bang_dau)

    }[table_name];

    if (!data) {
        console.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const url = `${GlobalStore.getLinkCongAPI()}${table_name}`;

    // console.log("G·ª≠i POST request t·ªõi:", url);
    // console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", data);

    fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    })
        .then(async response => {
            const text = await response.text();
            if (!text.trim().startsWith("{") && !text.trim().startsWith("[")) {
          //      console.log("Ph·∫£n h·ªìi t·ª´ server:", text);
                return { message: text };
            }
            return JSON.parse(text);
        })
        .then(resData => {
      //      alert(resData.message || "Th√™m d·ªØ li·ªáu th√†nh c√¥ng.");
            // table();
        })
        .catch(error => {
            console.error("C√≥ l·ªói x·∫£y ra khi th√™m:", error.message);
            alert(`L·ªói: ${error.message}`);
        });
}
function sua(data, table_name) {

    const primaryKeys = {
    "tai_khoan": ["tai_khoan"],         // Kh√≥a ch√≠nh l√† t√†i kho·∫£n
    "vai_tro": ["ma_vai_tro"],           // Kh√≥a ch√≠nh l√† m√£ vai tr√≤
    "nguoi_dung": ["ma_nguoi_dung"],      // Gi·ªØ m√£ ng∆∞·ªùi d√πng thay v√¨ t√†i kho·∫£n v√¨ c√≥ th·ªÉ c√≥ th√¥ng tin b·ªï sung
    "giai_dau": ["ma_giai_dau"],          // Kh√≥a ch√≠nh l√† m√£ gi·∫£i ƒë·∫•u
    "doi_bong": ["ma_doi_bong"],          // Kh√≥a ch√≠nh l√† m√£ ƒë·ªôi b√≥ng
    "vi_tri_cau_thu": ["ma_vi_tri"],      // ƒê·ªïi t√™n t·ª´ "vi_tri" th√†nh "vi_tri_cau_thu" ƒë·ªÉ kh·ªõp v·ªõi CSDL
    "cau_thu": ["ma_cau_thu"],            // Kh√≥a ch√≠nh l√† m√£ c·∫ßu th·ªß
    "cau_thu_giai_dau": ["ma_cau_thu", "ma_giai_dau"], // Kh√≥a ch√≠nh l√† (ma_cau_thu, ma_giai_dau)
    "vong_dau": ["ma_vong_dau"],         // Th√™m b·∫£ng v√≤ng ƒë·∫•u
    "tran_dau": ["ma_tran_dau"],          // Kh√≥a ch√≠nh l√† m√£ tr·∫≠n ƒë·∫•u
    "ket_qua_tran_dau": ["ma_tran_dau"],  // S·ª≠ d·ª•ng ma_tran_dau l√†m kh√≥a ch√≠nh thay v√¨ t·∫°o ma_ket_qua ri√™ng
    "trong_tai": ["ma_trong_tai"],        // B·∫£ng tr·ªçng t√†i, kh√≥a ch√≠nh l√† m√£ tr·ªçng t√†i
    "bang_dau": ["ma_bang_dau"],          // Th√™m b·∫£ng b·∫£ng ƒë·∫•u
    "bang_xep_hang_vong_loai": ["ma_doi_bong", "ma_bang_dau"] // Kh√≥a ch√≠nh l√† (ma_doi_bong, ma_bang_dau)

    }[table_name];

    if (!data) {
        console.error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        alert("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!");
        return;
    }
    if (!primaryKeys) {
        console.error(`B·∫£ng ${table_name} kh√¥ng h·ª£p l·ªá.`);
        alert("B·∫£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const keyValues = primaryKeys.map(key => data[key]);
    if (keyValues.some(value => value === undefined)) {
        console.error("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!", data);
        alert("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!");
        return;
    }

    const idPath = keyValues.join("/");
    const url = `${GlobalStore.getLinkCongAPI()}${table_name}/${idPath}`;

    // console.log("G·ª≠i PUT request t·ªõi:", url);
    // console.log("D·ªØ li·ªáu g·ª≠i ƒëi:", data);

    fetch(url, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    })
        .then(async response => {
            const text = await response.text();

            // Ki·ªÉm tra n·∫øu ph·∫£n h·ªìi tr·ªëng ho·∫∑c kh√¥ng ph·∫£i JSON
            if (!text.trim().startsWith("{") && !text.trim().startsWith("[")) {
           //     console.log("Ph·∫£n h·ªìi t·ª´ server:", text);
                return { message: text }; // Tr·∫£ v·ªÅ m·ªôt object ch·ª©a message
            }

            return JSON.parse(text); // N·∫øu JSON h·ª£p l·ªá, parse b√¨nh th∆∞·ªùng
        })
        .then(resData => {
            alert(resData.message || "S·ª≠a d·ªØ li·ªáu th√†nh c√¥ng.");
            // table();
        })
        .catch(error => {
            console.error("C√≥ l·ªói x·∫£y ra khi s·ª≠a:", error.message);
            alert(`L·ªói: ${error.message}`);
        });
}
async function xoa(keys, table_name) {
    const primaryKeysMap = {
        "tai_khoan": ["tai_khoan"],
        "vai_tro": ["ma_vai_tro"],
        "nguoi_dung": ["ma_nguoi_dung"],
        "giai_dau": ["ma_giai_dau"],
        "doi_bong": ["ma_doi_bong"],
        "vi_tri_cau_thu": ["ma_vi_tri"],
        "cau_thu": ["ma_cau_thu"],
        "cau_thu_giai_dau": ["ma_cau_thu", "ma_giai_dau"],
        "vong_dau": ["ma_vong_dau"],
        "tran_dau": ["ma_tran_dau"],
        "ket_qua_tran_dau": ["ma_tran_dau"],
        "trong_tai": ["ma_trong_tai"],
        "bang_dau": ["ma_bang_dau"],
        "bang_xep_hang_vong_loai": ["ma_doi_bong", "ma_bang_dau"]
    };

    // Ki·ªÉm tra xem b·∫£ng c√≥ h·ª£p l·ªá kh√¥ng
    const primaryKeys = primaryKeysMap[table_name];
    if (!primaryKeys) {
        console.error(`B·∫£ng ${table_name} kh√¥ng h·ª£p l·ªá.`);
        alert("B·∫£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    // Ki·ªÉm tra `keys` c√≥ h·ª£p l·ªá kh√¥ng
    if (!keys || typeof keys !== "object") {
        console.error("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh ƒë·ªÉ x√≥a!", keys);
        alert("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh ƒë·ªÉ x√≥a!");
        return;
    }

    // L·∫•y danh s√°ch gi√° tr·ªã c·ªßa kh√≥a ch√≠nh
    const keyValues = primaryKeys.map(key => keys[key]);

    // Ki·ªÉm tra xem t·∫•t c·∫£ gi√° tr·ªã c·ªßa kh√≥a ch√≠nh ƒë√£ c√≥ ch∆∞a
    if (keyValues.some(value => value === undefined || value === null)) {
        console.error("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!", keys);
        alert("Thi·∫øu th√¥ng tin kh√≥a ch√≠nh!");
        return;
    }

    // T·∫°o ƒë∆∞·ªùng d·∫´n DELETE t·ª´ kh√≥a ch√≠nh
    const idPath = keyValues.join("/");
    const url = `${GlobalStore.getLinkCongAPI()}${table_name}/${idPath}`;

    console.log("G·ª≠i DELETE request t·ªõi:", url);

    try {
        const response = await fetch(url, { method: 'DELETE' });

        if (!response.ok) {
            console.error(`L·ªói HTTP ${response.status}: ${response.statusText}`);
            alert(`L·ªói x√≥a: ${response.statusText}`);
            return;
        }

        const text = await response.text();
        const resData = text.trim().startsWith("{") || text.trim().startsWith("[") ? JSON.parse(text) : { message: text };

        alert(resData.message || "X√≥a d·ªØ li·ªáu th√†nh c√¥ng.");
    } catch (error) {
        console.error("C√≥ l·ªói x·∫£y ra khi x√≥a:", error.message);
        alert(`L·ªói: ${error.message}`);
    }
}



// G·∫Øn v√†o window ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p ·ªü m·ªçi n∆°i
window.hamChung = hamChung;
